{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RavyAPI.py","text":"<p>A simple and dynamic asynchronous Python wrapper for the Ravy API.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy usability</li> <li>100% API coverage</li> <li>Unit tested (soon\u2122\ufe0f)</li> <li>Pyright type compatible</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ul> <li>Compatible with Python 3.8+</li> <li>Not yet available on PyPI</li> </ul> <pre><code>python3 -m pip install git+https://github.com/GoogolGenius/RavyAPI.py.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code># Import required packages\nimport asyncio\n\nimport ravyapi\n\n\nasync def main() -&gt; None:\n    # Construct a ravyapi client object\n    client = ravyapi.Client(\"token\")  # Replace \"token\" with your API key\n\n    # Make a simple request to get token information\n    token_info = await client.tokens.get_token()\n    print(token_info.token_type)  # Print the token type: \"ravy\" | \"ksoft\"\n\n    # Close and teardown the client\n    await client.close()\n\n\n# Start the event loop and run the main function\nasyncio.run(main())\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Feel free to create pull requests and issues. Just be civil, kind, and respectful.</p> <p>This is my first library, so if you have any suggestions or questions, please let me know! Reach out via GitHub Issues or Discord <code>@googolgenius</code>.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#quick-example","title":"Quick Example","text":"<pre><code># Import required packages\nimport asyncio\n\nimport ravyapi\n\n\nasync def main() -&gt; None:\n    # Construct a ravyapi client object\n    client = ravyapi.Client(\"token\")  # Replace \"token\" with your API key\n\n    # Make a simple request to get token information\n    token_info = await client.tokens.get_token()\n    print(token_info.token_type)  # Print the token type: \"ravy\" | \"ksoft\"\n\n    # Close and teardown the client\n    await client.close()\n\n\n# Start the event loop and run the main function\nasyncio.run(main())\n</code></pre>"},{"location":"getting_started/#ksoft-tokens","title":"KSoft Tokens","text":"<p>If you have a KSoft token, you can simply pass it to the constructor for the <code>ravyapi.client.Client</code>. Please note that KSoft tokens are not compatible with any endpoints other than <code>ksoft</code> and <code>tokens</code>.</p>"},{"location":"getting_started/#phisherman-token","title":"Phisherman Token","text":"<p>You might have noticed there is no available kwarg to set the phisherman.gg token using the <code>urls</code> endpoint. This is because you can instead set it directly to the <code>ravyapi.client.Client</code> using the <code>ravyapi.client.Client.set_phisherman_token()</code> method. This also returns the <code>ravyapi.client.Client</code> object so you can chain calls.</p> <pre><code># Assume boilerplate is already set up\nclient = ravyapi.Client(\"token\").set_phisherman_token(\"phisherman_token\")\nwebsite_info = await client.urls.get_website(\"https://example.com\")\n</code></pre>"},{"location":"getting_started/#permissions","title":"Permissions","text":"<p>The API wrapper automatically validates your token's permissions upon the first method call. If you attempt to use an API method that you do not have permission to use, the library will raise a <code>ravyapi.api.errors.AccessException</code>. This information is currently stored internally, but not publicly accessible. To manually check for permissions, call the <code>ravyapi.client.Client.tokens.get_token()</code> method and use the <code>access</code> property.</p> <pre><code># Assume boilerplate is already set up\ntoken_info = await client.tokens.get_token()\npermissions = token_info.access\n</code></pre>"},{"location":"getting_started/#error-handling","title":"Error Handling","text":"<p>You can catch the defined errors in the <code>ravyapi.api.errors</code> module and handle them appropriately.</p> <pre><code># Assume boilerplate is already set up\ntry:\n    token_info = await client.tokens.get_token()\nexcept ravyapi.HTTPException as e:  # Generic HTTP error\n    if e.status == 429:\n        print(f\"Encountered {e.status}: we are being ratelimited by Cloudflare!\")\n    else:\n        print(f\"Encountered HTTP error: ({e.status}) - {e.exc_data}!\")\n\ntry:\n    website_info = await client.urls.get_website(\"https://example.com\")\nexcept ravyapi.AccessException as e:  # Access denied\n    print(f\"This errored as the endpoint route needed {e.required} permission!\")\n</code></pre>"},{"location":"getting_started/#more-information","title":"More Information","text":"<p>Check the API reference for more information as well as the official Ravy API documentation:</p> <p>Reference Ravy Docs</p>"},{"location":"reference/client/","title":"Client","text":"<p>Module containing the client interfacing for interactions.</p>"},{"location":"reference/client/#ravyapi.client.Client","title":"<code>Client</code>","text":"<p>The client interface for interacting with the Ravy API.</p>"},{"location":"reference/client/#ravyapi.client.Client--attributes","title":"Attributes","text":"<p>closed : bool     Whether or not the client is closed. avatars : Avatars     The <code>avatars</code> endpoint. guilds : Guilds     The <code>guilds</code> endpoint. ksoft : KSoft     The <code>ksoft</code> endpoint. users : Users     The <code>users</code> endpoint. urls : URLs     The <code>urls</code> endpoint. tokens : Tokens     The <code>tokens</code> endpoint.</p> Source code in <code>ravyapi/client.py</code> <pre><code>class Client:\n    \"\"\"The client interface for interacting with the Ravy API.\n\n    Attributes\n    ----------\n    closed : bool\n        Whether or not the client is closed.\n    avatars : Avatars\n        The `avatars` endpoint.\n    guilds : Guilds\n        The `guilds` endpoint.\n    ksoft : KSoft\n        The `ksoft` endpoint.\n    users : Users\n        The `users` endpoint.\n    urls : URLs\n        The `urls` endpoint.\n    tokens : Tokens\n        The `tokens` endpoint.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\n        \"_token\",\n        \"_http\",\n        \"_closed\",\n        \"_avatars\",\n        \"_guilds\",\n        \"_ksoft\",\n        \"_users\",\n        \"_urls\",\n        \"_tokens\",\n    )\n\n    def __init__(self, token: str) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        token : str\n            The token used to authenticate with the API.\n        \"\"\"\n        self._token: str = token\n        self._http: HTTPClient = HTTPClient(self._token)\n        self._closed: bool = False\n        self._avatars: Avatars = Avatars(self._http)\n        self._guilds: Guilds = Guilds(self._http)\n        self._ksoft: KSoft = KSoft(self._http)\n        self._users: Users = Users(self._http)\n        self._urls: URLs = URLs(self._http)\n        self._tokens: Tokens = Tokens(self._http)\n\n    async def close(self) -&gt; None:\n        \"\"\"Closes the client, shutting down the underlying HTTP client.\"\"\"\n        await self._http.close()\n        self._closed = True\n\n        _LOGGER.info(\"Client is successfully closed\")\n\n    def set_phisherman_token(self, token: str) -&gt; Client:\n        \"\"\"Sets the phisherman token for the client.\n\n        Parameters\n        ----------\n        token : str\n            The phisherman token to set.\n\n        Returns\n        -------\n        Client\n            The client with the phisherman token set.\n        \"\"\"\n        self._http.set_phisherman_token(token)\n        return self\n\n    @property\n    def closed(self) -&gt; bool:\n        \"\"\"Whether or not the client is closed.\"\"\"\n        return self._closed\n\n    @property\n    def avatars(self) -&gt; Avatars:\n        \"\"\"The `avatars` endpoint.\"\"\"\n        return self._avatars\n\n    @property\n    def guilds(self) -&gt; Guilds:\n        \"\"\"The `guilds` endpoint.\"\"\"\n        return self._guilds\n\n    @property\n    def ksoft(self) -&gt; KSoft:\n        \"\"\"The `ksoft` endpoint.\"\"\"\n        return self._ksoft\n\n    @property\n    def users(self) -&gt; Users:\n        \"\"\"The `users` endpoint.\"\"\"\n        return self._users\n\n    @property\n    def urls(self) -&gt; URLs:\n        \"\"\"The `urls` endpoint.\"\"\"\n        return self._urls\n\n    @property\n    def tokens(self) -&gt; Tokens:\n        \"\"\"The `tokens` endpoint.\"\"\"\n        return self._tokens\n</code></pre>"},{"location":"reference/client/#ravyapi.client.Client.avatars","title":"<code>avatars</code>  <code>property</code>","text":"<p>The <code>avatars</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.closed","title":"<code>closed</code>  <code>property</code>","text":"<p>Whether or not the client is closed.</p>"},{"location":"reference/client/#ravyapi.client.Client.guilds","title":"<code>guilds</code>  <code>property</code>","text":"<p>The <code>guilds</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.ksoft","title":"<code>ksoft</code>  <code>property</code>","text":"<p>The <code>ksoft</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.tokens","title":"<code>tokens</code>  <code>property</code>","text":"<p>The <code>tokens</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.urls","title":"<code>urls</code>  <code>property</code>","text":"<p>The <code>urls</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.users","title":"<code>users</code>  <code>property</code>","text":"<p>The <code>users</code> endpoint.</p>"},{"location":"reference/client/#ravyapi.client.Client.__init__","title":"<code>__init__(token)</code>","text":""},{"location":"reference/client/#ravyapi.client.Client.__init__--parameters","title":"Parameters","text":"<p>token : str     The token used to authenticate with the API.</p> Source code in <code>ravyapi/client.py</code> <pre><code>def __init__(self, token: str) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    token : str\n        The token used to authenticate with the API.\n    \"\"\"\n    self._token: str = token\n    self._http: HTTPClient = HTTPClient(self._token)\n    self._closed: bool = False\n    self._avatars: Avatars = Avatars(self._http)\n    self._guilds: Guilds = Guilds(self._http)\n    self._ksoft: KSoft = KSoft(self._http)\n    self._users: Users = Users(self._http)\n    self._urls: URLs = URLs(self._http)\n    self._tokens: Tokens = Tokens(self._http)\n</code></pre>"},{"location":"reference/client/#ravyapi.client.Client.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes the client, shutting down the underlying HTTP client.</p> Source code in <code>ravyapi/client.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"Closes the client, shutting down the underlying HTTP client.\"\"\"\n    await self._http.close()\n    self._closed = True\n\n    _LOGGER.info(\"Client is successfully closed\")\n</code></pre>"},{"location":"reference/client/#ravyapi.client.Client.set_phisherman_token","title":"<code>set_phisherman_token(token)</code>","text":"<p>Sets the phisherman token for the client.</p>"},{"location":"reference/client/#ravyapi.client.Client.set_phisherman_token--parameters","title":"Parameters","text":"<p>token : str     The phisherman token to set.</p>"},{"location":"reference/client/#ravyapi.client.Client.set_phisherman_token--returns","title":"Returns","text":"<p>Client     The client with the phisherman token set.</p> Source code in <code>ravyapi/client.py</code> <pre><code>def set_phisherman_token(self, token: str) -&gt; Client:\n    \"\"\"Sets the phisherman token for the client.\n\n    Parameters\n    ----------\n    token : str\n        The phisherman token to set.\n\n    Returns\n    -------\n    Client\n        The client with the phisherman token set.\n    \"\"\"\n    self._http.set_phisherman_token(token)\n    return self\n</code></pre>"},{"location":"reference/api/errors/","title":"Errors","text":"<p>Exceptions raised when an error is encountered during API calls.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError","title":"<code>AccessError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>A class denoting an exception raised when required permission is not satisfied.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError--attributes","title":"Attributes","text":"<p>required : str     The required permission for a path route.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class AccessError(Exception):\n    \"\"\"A class denoting an exception raised when required permission is not satisfied.\n\n    Attributes\n    ----------\n    required : str\n        The required permission for a path route.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_required\",)\n\n    def __init__(self, required: str) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        required : str\n            The permission that was needed.\n        \"\"\"\n        super().__init__()\n        self._required: str = required\n\n    def __str__(self) -&gt; str:\n        return (\n            f'Insufficient permissions accessing path route requiring \"{self.required}\"'\n        )\n\n    @property\n    def required(self) -&gt; str:\n        \"\"\"The required permission for a path route.\"\"\"\n        return self._required\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError.required","title":"<code>required</code>  <code>property</code>","text":"<p>The required permission for a path route.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError.__init__","title":"<code>__init__(required)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.AccessError.__init__--parameters","title":"Parameters","text":"<p>required : str     The permission that was needed.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, required: str) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    required : str\n        The permission that was needed.\n    \"\"\"\n    super().__init__()\n    self._required: str = required\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError","title":"<code>BadRequestError</code>","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a bad request is made.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError--attributes","title":"Attributes","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class BadRequestError(HTTPError):\n    \"\"\"A class denoting an exception raised when a bad request is made.\n\n    Attributes\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_exc_data\",)\n\n    def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        exc_data : str | dict[str, Any]\n            The error data returned by the Ravy API.\n        \"\"\"\n        super().__init__(400, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError.__init__","title":"<code>__init__(exc_data)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.BadRequestError.__init__--parameters","title":"Parameters","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n    super().__init__(400, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError","title":"<code>ForbiddenError</code>","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a forbidden request is made.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError--attributes","title":"Attributes","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class ForbiddenError(HTTPError):\n    \"\"\"A class denoting an exception raised when a forbidden request is made.\n\n    Attributes\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_exc_data\",)\n\n    def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        exc_data : str | dict[str, Any]\n            The error data returned by the Ravy API.\n        \"\"\"\n        super().__init__(403, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError.__init__","title":"<code>__init__(exc_data)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.ForbiddenError.__init__--parameters","title":"Parameters","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n    super().__init__(403, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError","title":"<code>HTTPError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>A base class for all HTTP exceptions.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError--parameters","title":"Parameters","text":"<p>status : int     The HTTP status code of the response. exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError--attributes","title":"Attributes","text":"<p>status : int     The HTTP status code of the response. exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class HTTPError(Exception):\n    \"\"\"A base class for all HTTP exceptions.\n\n    Parameters\n    ----------\n    status : int\n        The HTTP status code of the response.\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n\n    Attributes\n    ----------\n    status : int\n        The HTTP status code of the response.\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_status\", \"_exc_data\")\n\n    def __init__(self, status: int, exc_data: str | dict[str, Any]) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        status : int\n            The HTTP status code of the response.\n        exc_data : str | dict[str, Any]\n            The error data returned by the Ravy API.\n        \"\"\"\n        super().__init__()\n        self._status: int = status\n        self._exc_data: str | dict[str, Any] = exc_data\n\n    def __str__(self) -&gt; str:\n        if isinstance(self.exc_data, dict):\n            return (\n                f\"({self.status}) {self.exc_data['error']}\"\n                f\" - {self.exc_data['details']}\"\n            )\n\n        return f\"({self.status}) {self.exc_data}\"\n\n    @property\n    def status(self) -&gt; int:\n        \"\"\"The HTTP status code of the response.\"\"\"\n        return self._status\n\n    @property\n    def exc_data(self) -&gt; str | dict[str, Any]:\n        \"\"\"The error data returned by the Ravy API.\"\"\"\n        return self._exc_data\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.exc_data","title":"<code>exc_data</code>  <code>property</code>","text":"<p>The error data returned by the Ravy API.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.status","title":"<code>status</code>  <code>property</code>","text":"<p>The HTTP status code of the response.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.__init__","title":"<code>__init__(status, exc_data)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.HTTPError.__init__--parameters","title":"Parameters","text":"<p>status : int     The HTTP status code of the response. exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, status: int, exc_data: str | dict[str, Any]) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    status : int\n        The HTTP status code of the response.\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n    super().__init__()\n    self._status: int = status\n    self._exc_data: str | dict[str, Any] = exc_data\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError","title":"<code>NotFoundError</code>","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a resource is not found.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError--attributes","title":"Attributes","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class NotFoundError(HTTPError):\n    \"\"\"A class denoting an exception raised when a resource is not found.\n\n    Attributes\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_exc_data\",)\n\n    def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        exc_data : str | dict[str, Any]\n            The error data returned by the Ravy API.\n        \"\"\"\n        super().__init__(404, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError.__init__","title":"<code>__init__(exc_data)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.NotFoundError.__init__--parameters","title":"Parameters","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n    super().__init__(404, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError","title":"<code>TooManyRequestsError</code>","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when a request is made too frequently.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError--attributes","title":"Attributes","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class TooManyRequestsError(HTTPError):\n    \"\"\"A class denoting an exception raised when a request is made too frequently.\n\n    Attributes\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_exc_data\",)\n\n    def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        exc_data : str | dict[str, Any]\n            The error data returned by the Ravy API.\n        \"\"\"\n        super().__init__(429, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError.__init__","title":"<code>__init__(exc_data)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.TooManyRequestsError.__init__--parameters","title":"Parameters","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n    super().__init__(429, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError","title":"<code>UnauthorizedError</code>","text":"<p>               Bases: <code>HTTPError</code></p> <p>A class denoting an exception raised when an unauthorized request is made.</p>"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError--attributes","title":"Attributes","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>class UnauthorizedError(HTTPError):\n    \"\"\"A class denoting an exception raised when an unauthorized request is made.\n\n    Attributes\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_exc_data\",)\n\n    def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        exc_data : str | dict[str, Any]\n            The error data returned by the Ravy API.\n        \"\"\"\n        super().__init__(401, exc_data)\n</code></pre>"},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError.__init__","title":"<code>__init__(exc_data)</code>","text":""},{"location":"reference/api/errors/#ravyapi.api.errors.UnauthorizedError.__init__--parameters","title":"Parameters","text":"<p>exc_data : str | dict[str, Any]     The error data returned by the Ravy API.</p> Source code in <code>ravyapi/api/errors.py</code> <pre><code>def __init__(self, exc_data: str | dict[str, Any]) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    exc_data : str | dict[str, Any]\n        The error data returned by the Ravy API.\n    \"\"\"\n    super().__init__(401, exc_data)\n</code></pre>"},{"location":"reference/api/endpoints/avatars/","title":"Avatars","text":"<p>Implementations for the <code>avatars</code> endpoint.</p>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars","title":"<code>Avatars</code>","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>avatars</code> endpoint.</p> Source code in <code>ravyapi/api/endpoints/avatars.py</code> <pre><code>class Avatars(HTTPAwareEndpoint):\n    \"\"\"A class with implementations for the `avatars` endpoint.\"\"\"\n\n    __slots__: tuple[str, ...] = ()\n\n    @with_permission_check(\"avatars\")\n    async def check_avatar(\n        self: HTTPAwareEndpoint,\n        avatar: str | bytes,\n        threshold: float = 0.97,\n        method: Literal[\"ssim\", \"phash\"] = \"phash\",\n    ) -&gt; CheckAvatarResponse:\n        \"\"\"Check if avatar is fraudulent.\n\n        Parameters\n        ----------\n        avatar : str | bytes\n            Link to the avatar, should start with \"cdn.discordapp.com\" or the avatar to query, as an octet stream.\n        threshold : float = 0.97\n            How similar the avatar needs to be for it to match (0-1, default 0.97).\n        method : Literal[\"ssim\", \"phash\"]\n            Which method to use for matching the avatars (\"ssim\" or \"phash\", default is \"phash\").\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n        ValueError\n            If any parameters are invalid values.\n\n        Returns\n        -------\n        CheckAvatarResponse\n            A model response from `ravyapi.api.endpoints.avatars.Avatars.check_avatar`.\n            Located as `ravyapi.api.models.avatars.CheckAvatarResponse`.\n        \"\"\"\n        if not isinstance(avatar, (str, bytes)):\n            raise TypeError('Parameter \"avatar\" must be of type \"str\" or \"bytes\"')\n\n        if not avatar:\n            raise ValueError('Parameter \"avatar\" must not be empty')\n\n        if not 0 &lt;= threshold &lt;= 1:\n            raise ValueError(\n                'Parameter \"threshold\" must be of type \"float\" between 0 and 1'\n            )\n\n        if method not in (\"ssim\", \"phash\"):\n            raise ValueError('Parameter \"method\" must be either \"ssim\" or \"phash\"')\n\n        if isinstance(avatar, str):\n            if urllib.parse.urlparse(avatar).hostname != \"cdn.discordapp.com\":\n                raise ValueError(\n                    'Parameter \"avatar_url\" must start with \"https://cdn.discordapp.com\"'\n                )\n\n            return CheckAvatarResponse(\n                await self._http.get(\n                    self._http.paths.avatars.route,\n                    params={\n                        \"avatar\": avatar,\n                        \"threshold\": threshold,\n                        \"method\": method,\n                    },\n                )\n            )\n\n        data = aiohttp.FormData()\n        data.add_field(\"avatar\", avatar, content_type=\"application/octet-stream\")\n\n        return CheckAvatarResponse(\n            await self._http.post(\n                self._http.paths.avatars.route,\n                params={\n                    \"threshold\": threshold,\n                    \"method\": method,\n                },\n                data=data,\n            )\n        )\n</code></pre>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars.check_avatar","title":"<code>check_avatar(avatar, threshold=0.97, method='phash')</code>  <code>async</code>","text":"<p>Check if avatar is fraudulent.</p>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars.check_avatar--parameters","title":"Parameters","text":"<p>avatar : str | bytes     Link to the avatar, should start with \"cdn.discordapp.com\" or the avatar to query, as an octet stream. threshold : float = 0.97     How similar the avatar needs to be for it to match (0-1, default 0.97). method : Literal[\"ssim\", \"phash\"]     Which method to use for matching the avatars (\"ssim\" or \"phash\", default is \"phash\").</p>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars.check_avatar--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types. ValueError     If any parameters are invalid values.</p>"},{"location":"reference/api/endpoints/avatars/#ravyapi.api.endpoints.avatars.Avatars.check_avatar--returns","title":"Returns","text":"<p>CheckAvatarResponse     A model response from <code>ravyapi.api.endpoints.avatars.Avatars.check_avatar</code>.     Located as <code>ravyapi.api.models.avatars.CheckAvatarResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/avatars.py</code> <pre><code>@with_permission_check(\"avatars\")\nasync def check_avatar(\n    self: HTTPAwareEndpoint,\n    avatar: str | bytes,\n    threshold: float = 0.97,\n    method: Literal[\"ssim\", \"phash\"] = \"phash\",\n) -&gt; CheckAvatarResponse:\n    \"\"\"Check if avatar is fraudulent.\n\n    Parameters\n    ----------\n    avatar : str | bytes\n        Link to the avatar, should start with \"cdn.discordapp.com\" or the avatar to query, as an octet stream.\n    threshold : float = 0.97\n        How similar the avatar needs to be for it to match (0-1, default 0.97).\n    method : Literal[\"ssim\", \"phash\"]\n        Which method to use for matching the avatars (\"ssim\" or \"phash\", default is \"phash\").\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n    ValueError\n        If any parameters are invalid values.\n\n    Returns\n    -------\n    CheckAvatarResponse\n        A model response from `ravyapi.api.endpoints.avatars.Avatars.check_avatar`.\n        Located as `ravyapi.api.models.avatars.CheckAvatarResponse`.\n    \"\"\"\n    if not isinstance(avatar, (str, bytes)):\n        raise TypeError('Parameter \"avatar\" must be of type \"str\" or \"bytes\"')\n\n    if not avatar:\n        raise ValueError('Parameter \"avatar\" must not be empty')\n\n    if not 0 &lt;= threshold &lt;= 1:\n        raise ValueError(\n            'Parameter \"threshold\" must be of type \"float\" between 0 and 1'\n        )\n\n    if method not in (\"ssim\", \"phash\"):\n        raise ValueError('Parameter \"method\" must be either \"ssim\" or \"phash\"')\n\n    if isinstance(avatar, str):\n        if urllib.parse.urlparse(avatar).hostname != \"cdn.discordapp.com\":\n            raise ValueError(\n                'Parameter \"avatar_url\" must start with \"https://cdn.discordapp.com\"'\n            )\n\n        return CheckAvatarResponse(\n            await self._http.get(\n                self._http.paths.avatars.route,\n                params={\n                    \"avatar\": avatar,\n                    \"threshold\": threshold,\n                    \"method\": method,\n                },\n            )\n        )\n\n    data = aiohttp.FormData()\n    data.add_field(\"avatar\", avatar, content_type=\"application/octet-stream\")\n\n    return CheckAvatarResponse(\n        await self._http.post(\n            self._http.paths.avatars.route,\n            params={\n                \"threshold\": threshold,\n                \"method\": method,\n            },\n            data=data,\n        )\n    )\n</code></pre>"},{"location":"reference/api/endpoints/guilds/","title":"Guilds","text":"<p>Implementations for the <code>guilds</code> endpoint.</p>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds","title":"<code>Guilds</code>","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>guilds</code> endpoint.</p> Source code in <code>ravyapi/api/endpoints/guilds.py</code> <pre><code>class Guilds(HTTPAwareEndpoint):\n    \"\"\"A class with implementations for the `guilds` endpoint.\"\"\"\n\n    __slots__: tuple[str, ...] = ()\n\n    @with_permission_check(\"guilds\")\n    async def get_guild(self: HTTPAwareEndpoint, guild_id: int) -&gt; GetGuildResponse:\n        \"\"\"Get extensive guild information.\n\n        Parameters\n        ----------\n        guild_id : int\n            Guild ID of the guild to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetGuildResponse\n            A model response from `ravyapi.api.endpoints.guilds.Guilds.get_guild`.\n            Located as `ravyapi.api.models.guilds.GetGuildResponse`.\n        \"\"\"\n        if not isinstance(guild_id, int):\n            raise TypeError('Parameter \"guild_id\" must be of type \"int\"')\n\n        return GetGuildResponse(\n            await self._http.get(\n                self._http.paths.guilds(guild_id).route,\n            )\n        )\n</code></pre>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds.get_guild","title":"<code>get_guild(guild_id)</code>  <code>async</code>","text":"<p>Get extensive guild information.</p>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds.get_guild--parameters","title":"Parameters","text":"<p>guild_id : int     Guild ID of the guild to look up.</p>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds.get_guild--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/guilds/#ravyapi.api.endpoints.guilds.Guilds.get_guild--returns","title":"Returns","text":"<p>GetGuildResponse     A model response from <code>ravyapi.api.endpoints.guilds.Guilds.get_guild</code>.     Located as <code>ravyapi.api.models.guilds.GetGuildResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/guilds.py</code> <pre><code>@with_permission_check(\"guilds\")\nasync def get_guild(self: HTTPAwareEndpoint, guild_id: int) -&gt; GetGuildResponse:\n    \"\"\"Get extensive guild information.\n\n    Parameters\n    ----------\n    guild_id : int\n        Guild ID of the guild to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetGuildResponse\n        A model response from `ravyapi.api.endpoints.guilds.Guilds.get_guild`.\n        Located as `ravyapi.api.models.guilds.GetGuildResponse`.\n    \"\"\"\n    if not isinstance(guild_id, int):\n        raise TypeError('Parameter \"guild_id\" must be of type \"int\"')\n\n    return GetGuildResponse(\n        await self._http.get(\n            self._http.paths.guilds(guild_id).route,\n        )\n    )\n</code></pre>"},{"location":"reference/api/endpoints/ksoft/","title":"Ksoft","text":"<p>Implementations for the <code>ksoft</code> endpoint.</p>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft","title":"<code>KSoft</code>","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>ksoft</code> endpoint.</p> Source code in <code>ravyapi/api/endpoints/ksoft.py</code> <pre><code>class KSoft(HTTPAwareEndpoint):\n    \"\"\"A class with implementations for the `ksoft` endpoint.\"\"\"\n\n    __slots__: tuple[str, ...] = ()\n\n    @with_permission_check(\"ksoft.bans\")\n    async def get_ban(self: HTTPAwareEndpoint, user_id: int) -&gt; GetKSoftBanResponse:\n        \"\"\"Get ban status.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetKSoftBanResponse\n            A model response from `ravyapi.api.endpoints.ksoft.KSoft.get_ban`.\n            Located as `ravyapi.api.models.ksoft.GetKSoftBanResponse`.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        return GetKSoftBanResponse(\n            await self._http.get(\n                self._http.paths.ksoft.bans(user_id),\n            )\n        )\n</code></pre>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft.get_ban","title":"<code>get_ban(user_id)</code>  <code>async</code>","text":"<p>Get ban status.</p>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft.get_ban--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to look up.</p>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft.get_ban--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/ksoft/#ravyapi.api.endpoints.ksoft.KSoft.get_ban--returns","title":"Returns","text":"<p>GetKSoftBanResponse     A model response from <code>ravyapi.api.endpoints.ksoft.KSoft.get_ban</code>.     Located as <code>ravyapi.api.models.ksoft.GetKSoftBanResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/ksoft.py</code> <pre><code>@with_permission_check(\"ksoft.bans\")\nasync def get_ban(self: HTTPAwareEndpoint, user_id: int) -&gt; GetKSoftBanResponse:\n    \"\"\"Get ban status.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetKSoftBanResponse\n        A model response from `ravyapi.api.endpoints.ksoft.KSoft.get_ban`.\n        Located as `ravyapi.api.models.ksoft.GetKSoftBanResponse`.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    return GetKSoftBanResponse(\n        await self._http.get(\n            self._http.paths.ksoft.bans(user_id),\n        )\n    )\n</code></pre>"},{"location":"reference/api/endpoints/tokens/","title":"Tokens","text":"<p>Implementations for the <code>tokens</code> endpoint.</p>"},{"location":"reference/api/endpoints/tokens/#ravyapi.api.endpoints.tokens.Tokens","title":"<code>Tokens</code>","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>tokens</code> endpoint.</p> Source code in <code>ravyapi/api/endpoints/tokens.py</code> <pre><code>class Tokens(HTTPAwareEndpoint):\n    \"\"\"A class with implementations for the `tokens` endpoint.\"\"\"\n\n    __slots__: tuple[str, ...] = ()\n\n    async def get_token(self: HTTPAwareEndpoint) -&gt; GetTokenResponse:\n        \"\"\"Get current token information.\n\n        Returns\n        -------\n        GetTokenResponse\n            A model response from `ravyapi.api.endpoints.tokens.Tokens.get_token`.\n            Located as `ravyapi.api.models.tokens.GetTokenResponse`.\n        \"\"\"\n        return GetTokenResponse(await self._http.get(self._http.paths.tokens.route))\n</code></pre>"},{"location":"reference/api/endpoints/tokens/#ravyapi.api.endpoints.tokens.Tokens.get_token","title":"<code>get_token()</code>  <code>async</code>","text":"<p>Get current token information.</p>"},{"location":"reference/api/endpoints/tokens/#ravyapi.api.endpoints.tokens.Tokens.get_token--returns","title":"Returns","text":"<p>GetTokenResponse     A model response from <code>ravyapi.api.endpoints.tokens.Tokens.get_token</code>.     Located as <code>ravyapi.api.models.tokens.GetTokenResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/tokens.py</code> <pre><code>async def get_token(self: HTTPAwareEndpoint) -&gt; GetTokenResponse:\n    \"\"\"Get current token information.\n\n    Returns\n    -------\n    GetTokenResponse\n        A model response from `ravyapi.api.endpoints.tokens.Tokens.get_token`.\n        Located as `ravyapi.api.models.tokens.GetTokenResponse`.\n    \"\"\"\n    return GetTokenResponse(await self._http.get(self._http.paths.tokens.route))\n</code></pre>"},{"location":"reference/api/endpoints/urls/","title":"Urls","text":"<p>Implementations for the <code>urls</code> endpoint.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs","title":"<code>URLs</code>","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>urls</code> endpoint.</p> Source code in <code>ravyapi/api/endpoints/urls.py</code> <pre><code>class URLs(HTTPAwareEndpoint):\n    \"\"\"A class with implementations for the `urls` endpoint.\"\"\"\n\n    __slots__: tuple[str, ...] = ()\n\n    @with_permission_check(\"urls.cached\")\n    async def get_website(\n        self: HTTPAwareEndpoint,\n        url: str,\n        *,\n        author: int | None = None,\n        phisherman_user: int | None = None,\n    ) -&gt; GetWebsiteResponse:\n        \"\"\"Get website information.\n\n        Parameters\n        ----------\n        url : str\n            The url-encoded url to look up.\n        author : int | None\n            Optional, the user that posted the message containing this URL (for auto banning, requires admin.users).\n        phisherman_user : int | None\n            Optional, required if `ravyapi.client.Client.set_phisherman_token` is called, Discord user ID of the token owner.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n        ValueError\n            If any parameters are invalid values.\n\n        Returns\n        -------\n        GetWebsiteResponse\n            A model response from `ravyapi.api.endpoints.urls.URLs.get_website`.\n            Located as `ravyapi.api.models.urls.GetWebsiteResponse`.\n        \"\"\"\n        if not isinstance(url, str):\n            raise TypeError('Parameter \"url\" must be of type \"str\"')\n\n        if not url:\n            raise ValueError('Parameter \"url\" must not empty')\n\n        if author is not None and not isinstance(author, int):\n            raise TypeError('Parameter \"author\" must be of type \"int\"')\n\n        if phisherman_user is not None and not isinstance(phisherman_user, int):\n            raise TypeError('Parameter \"phisherman_user\" must be of type \"int\"')\n\n        if self._http.phisherman_token is None and phisherman_user:\n            raise ValueError(\"Phisherman token required if phisherman user is set.\")\n\n        if self._http.phisherman_token is not None and not phisherman_user:\n            raise ValueError(\"Phisherman user required if phisherman token is set.\")\n\n        params: dict[str, Any] = {\"url\": url}\n\n        if author is not None:\n            params[\"author\"] = author\n\n        if self._http.phisherman_token is not None:\n            params[\"phisherman_token\"] = self._http.phisherman_token\n\n        if phisherman_user is not None:\n            params[\"phisherman_user\"] = phisherman_user\n\n        return GetWebsiteResponse(\n            await self._http.get(self._http.paths.urls.route, params=params)\n        )\n\n    @with_permission_check(\"admin.urls\")\n    async def edit_website(\n        self: HTTPAwareEndpoint,\n        url: str,\n        *,\n        is_fraudulent: bool,\n        message: str,\n        encode: bool = True,\n    ) -&gt; None:\n        \"\"\"Edit website information.\n\n        Parameters\n        ----------\n        url : str\n            The url-encoded url to set data for.\n        is_fraudulent : bool\n            Whether the website is fraudulent.\n        message : str\n            An informational message about the website.\n        encode : bool\n            Whether to url-encode the parameter `url`.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n        ValueError\n            If any parameters are invalid values.\n        \"\"\"\n        if not isinstance(url, str):\n            raise TypeError('Parameter \"url\" must be of type \"str\"')\n\n        if not url:\n            raise ValueError('Parameter \"url\" must not be empty')\n\n        if not isinstance(is_fraudulent, bool):\n            raise TypeError('Parameter \"is_fraudulent\" must be of type \"bool\"')\n\n        if not isinstance(message, str):\n            raise TypeError('Parameter \"message\" must be of type \"str\"')\n\n        if not message:\n            raise ValueError('Parameter \"message\" must not be empty')\n\n        if not isinstance(encode, bool):\n            raise TypeError('Parameter \"encode\" must be of type \"bool\"')\n\n        if encode:\n            message = urllib.parse.quote_plus(message)\n\n        await self._http.post(\n            f\"{self._http.paths.urls.route}/{url}\",\n            json=EditWebsiteRequest(is_fraudulent, message).to_json(),\n        )\n</code></pre>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.edit_website","title":"<code>edit_website(url, *, is_fraudulent, message, encode=True)</code>  <code>async</code>","text":"<p>Edit website information.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.edit_website--parameters","title":"Parameters","text":"<p>url : str     The url-encoded url to set data for. is_fraudulent : bool     Whether the website is fraudulent. message : str     An informational message about the website. encode : bool     Whether to url-encode the parameter <code>url</code>.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.edit_website--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types. ValueError     If any parameters are invalid values.</p> Source code in <code>ravyapi/api/endpoints/urls.py</code> <pre><code>@with_permission_check(\"admin.urls\")\nasync def edit_website(\n    self: HTTPAwareEndpoint,\n    url: str,\n    *,\n    is_fraudulent: bool,\n    message: str,\n    encode: bool = True,\n) -&gt; None:\n    \"\"\"Edit website information.\n\n    Parameters\n    ----------\n    url : str\n        The url-encoded url to set data for.\n    is_fraudulent : bool\n        Whether the website is fraudulent.\n    message : str\n        An informational message about the website.\n    encode : bool\n        Whether to url-encode the parameter `url`.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n    ValueError\n        If any parameters are invalid values.\n    \"\"\"\n    if not isinstance(url, str):\n        raise TypeError('Parameter \"url\" must be of type \"str\"')\n\n    if not url:\n        raise ValueError('Parameter \"url\" must not be empty')\n\n    if not isinstance(is_fraudulent, bool):\n        raise TypeError('Parameter \"is_fraudulent\" must be of type \"bool\"')\n\n    if not isinstance(message, str):\n        raise TypeError('Parameter \"message\" must be of type \"str\"')\n\n    if not message:\n        raise ValueError('Parameter \"message\" must not be empty')\n\n    if not isinstance(encode, bool):\n        raise TypeError('Parameter \"encode\" must be of type \"bool\"')\n\n    if encode:\n        message = urllib.parse.quote_plus(message)\n\n    await self._http.post(\n        f\"{self._http.paths.urls.route}/{url}\",\n        json=EditWebsiteRequest(is_fraudulent, message).to_json(),\n    )\n</code></pre>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.get_website","title":"<code>get_website(url, *, author=None, phisherman_user=None)</code>  <code>async</code>","text":"<p>Get website information.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.get_website--parameters","title":"Parameters","text":"<p>url : str     The url-encoded url to look up. author : int | None     Optional, the user that posted the message containing this URL (for auto banning, requires admin.users). phisherman_user : int | None     Optional, required if <code>ravyapi.client.Client.set_phisherman_token</code> is called, Discord user ID of the token owner.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.get_website--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types. ValueError     If any parameters are invalid values.</p>"},{"location":"reference/api/endpoints/urls/#ravyapi.api.endpoints.urls.URLs.get_website--returns","title":"Returns","text":"<p>GetWebsiteResponse     A model response from <code>ravyapi.api.endpoints.urls.URLs.get_website</code>.     Located as <code>ravyapi.api.models.urls.GetWebsiteResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/urls.py</code> <pre><code>@with_permission_check(\"urls.cached\")\nasync def get_website(\n    self: HTTPAwareEndpoint,\n    url: str,\n    *,\n    author: int | None = None,\n    phisherman_user: int | None = None,\n) -&gt; GetWebsiteResponse:\n    \"\"\"Get website information.\n\n    Parameters\n    ----------\n    url : str\n        The url-encoded url to look up.\n    author : int | None\n        Optional, the user that posted the message containing this URL (for auto banning, requires admin.users).\n    phisherman_user : int | None\n        Optional, required if `ravyapi.client.Client.set_phisherman_token` is called, Discord user ID of the token owner.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n    ValueError\n        If any parameters are invalid values.\n\n    Returns\n    -------\n    GetWebsiteResponse\n        A model response from `ravyapi.api.endpoints.urls.URLs.get_website`.\n        Located as `ravyapi.api.models.urls.GetWebsiteResponse`.\n    \"\"\"\n    if not isinstance(url, str):\n        raise TypeError('Parameter \"url\" must be of type \"str\"')\n\n    if not url:\n        raise ValueError('Parameter \"url\" must not empty')\n\n    if author is not None and not isinstance(author, int):\n        raise TypeError('Parameter \"author\" must be of type \"int\"')\n\n    if phisherman_user is not None and not isinstance(phisherman_user, int):\n        raise TypeError('Parameter \"phisherman_user\" must be of type \"int\"')\n\n    if self._http.phisherman_token is None and phisherman_user:\n        raise ValueError(\"Phisherman token required if phisherman user is set.\")\n\n    if self._http.phisherman_token is not None and not phisherman_user:\n        raise ValueError(\"Phisherman user required if phisherman token is set.\")\n\n    params: dict[str, Any] = {\"url\": url}\n\n    if author is not None:\n        params[\"author\"] = author\n\n    if self._http.phisherman_token is not None:\n        params[\"phisherman_token\"] = self._http.phisherman_token\n\n    if phisherman_user is not None:\n        params[\"phisherman_user\"] = phisherman_user\n\n    return GetWebsiteResponse(\n        await self._http.get(self._http.paths.urls.route, params=params)\n    )\n</code></pre>"},{"location":"reference/api/endpoints/users/","title":"Users","text":"<p>Implementations for the <code>users</code> endpoint.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users","title":"<code>Users</code>","text":"<p>               Bases: <code>HTTPAwareEndpoint</code></p> <p>A class with implementations for the <code>users</code> endpoint.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>class Users(HTTPAwareEndpoint):\n    \"\"\"A class with implementations for the `users` endpoint.\"\"\"\n\n    __slots__: tuple[str, ...] = ()\n\n    @with_permission_check(\"users\")\n    async def get_user(self: HTTPAwareEndpoint, user_id: int) -&gt; GetUserResponse:\n        \"\"\"Get extensive user information.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetUserResponse\n            A model response from `ravyapi.api.endpoints.users.Users.get_user`.\n            Located as `ravyapi.api.models.users.GetUserResponse`.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        return GetUserResponse(\n            await self._http.get(self._http.paths.users(user_id).route)\n        )\n\n    @with_permission_check(\"users.pronouns\")\n    async def get_pronouns(\n        self: HTTPAwareEndpoint, user_id: int\n    ) -&gt; GetPronounsResponse:\n        \"\"\"Get pronouns.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetPronounsResponse\n            A model response from `ravyapi.api.endpoints.users.Users.get_pronouns`.\n            Located as `ravyapi.api.models.users.GetPronounsResponse`.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        return GetPronounsResponse(\n            await self._http.get(self._http.paths.users(user_id).pronouns)\n        )\n\n    @with_permission_check(\"users.bans\")\n    async def get_bans(self: HTTPAwareEndpoint, user_id: int) -&gt; GetBansResponse:\n        \"\"\"Get bans.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetBansResponse\n            A model response from `ravyapi.api.endpoints.users.Users.get_bans`.\n            Located as `ravyapi.api.models.users.GetBansResponse`.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        return GetBansResponse(\n            await self._http.get(self._http.paths.users(user_id).bans)\n        )\n\n    @with_permission_check(\"admin.bans\")\n    async def add_ban(\n        self: HTTPAwareEndpoint,\n        user_id: int,\n        *,\n        provider: str,\n        reason: str,\n        moderator: int,\n        reason_key: str | None = None,\n    ) -&gt; None:\n        \"\"\"Add ban.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to ban.\n        provider : str\n            Source for where the user was banned.\n        reason : str\n            Why the user was banned.\n        moderator : int\n            User ID of the responsible moderator, usually Discord.\n        reason_key : str | None\n            Machine-readable version of the reason - only present for providers ravy and dservices.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n        ValueError\n            If any parameters are invalid values.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        if not isinstance(provider, str):\n            raise TypeError('Parameter \"provider\" must be of type \"str\"')\n\n        if not provider:\n            raise ValueError('Parameter \"provider\" must not be empty')\n\n        if not isinstance(reason, str):\n            raise TypeError('Parameter \"reason\" must be of type \"str\"')\n\n        if not reason:\n            raise ValueError('Parameter \"reason\" must not be empty')\n\n        if not isinstance(moderator, int):\n            raise TypeError('Parameter \"moderator\" must be of type \"int\"')\n\n        if reason_key is not None and not isinstance(reason_key, str):\n            raise TypeError('Parameter \"reason_key\" must be of type \"str\"')\n\n        if reason_key is not None and not reason_key:\n            raise ValueError('Parameter \"reason_key\" must not be empty')\n\n        await self._http.post(\n            self._http.paths.users(user_id).bans,\n            json=BanEntryRequest(provider, reason, moderator, reason_key).to_json(),\n        )\n\n    @with_permission_check(\"users.whitelists\")\n    async def get_whitelists(\n        self: HTTPAwareEndpoint, user_id: int\n    ) -&gt; GetWhitelistsResponse:\n        \"\"\"Get whitelists.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetWhitelistsResponse\n            A model response from `ravyapi.api.endpoints.users.Users.get_whitelists`.\n            Located as `ravyapi.api.models.users.GetWhitelistsResponse`.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        return GetWhitelistsResponse(\n            await self._http.get(self._http.paths.users(user_id).whitelists)\n        )\n\n    @with_permission_check(\"users.rep\")\n    async def get_reputation(\n        self: HTTPAwareEndpoint, user_id: int\n    ) -&gt; GetReputationResponse:\n        \"\"\"Get reputation.\n\n        Parameters\n        ----------\n        user_id : int\n            User ID of the user to look up.\n\n        Raises\n        ------\n        TypeError\n            If any parameters are of invalid types.\n\n        Returns\n        -------\n        GetReputationResponse\n            A model response from `ravyapi.api.endpoints.users.Users.get_reputation`.\n            Located as `ravyapi.api.models.users.GetReputationResponse`.\n        \"\"\"\n        if not isinstance(user_id, int):\n            raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n        return GetReputationResponse(\n            await self._http.get(self._http.paths.users(user_id).reputation)\n        )\n</code></pre>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.add_ban","title":"<code>add_ban(user_id, *, provider, reason, moderator, reason_key=None)</code>  <code>async</code>","text":"<p>Add ban.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.add_ban--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to ban. provider : str     Source for where the user was banned. reason : str     Why the user was banned. moderator : int     User ID of the responsible moderator, usually Discord. reason_key : str | None     Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.add_ban--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types. ValueError     If any parameters are invalid values.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>@with_permission_check(\"admin.bans\")\nasync def add_ban(\n    self: HTTPAwareEndpoint,\n    user_id: int,\n    *,\n    provider: str,\n    reason: str,\n    moderator: int,\n    reason_key: str | None = None,\n) -&gt; None:\n    \"\"\"Add ban.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to ban.\n    provider : str\n        Source for where the user was banned.\n    reason : str\n        Why the user was banned.\n    moderator : int\n        User ID of the responsible moderator, usually Discord.\n    reason_key : str | None\n        Machine-readable version of the reason - only present for providers ravy and dservices.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n    ValueError\n        If any parameters are invalid values.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    if not isinstance(provider, str):\n        raise TypeError('Parameter \"provider\" must be of type \"str\"')\n\n    if not provider:\n        raise ValueError('Parameter \"provider\" must not be empty')\n\n    if not isinstance(reason, str):\n        raise TypeError('Parameter \"reason\" must be of type \"str\"')\n\n    if not reason:\n        raise ValueError('Parameter \"reason\" must not be empty')\n\n    if not isinstance(moderator, int):\n        raise TypeError('Parameter \"moderator\" must be of type \"int\"')\n\n    if reason_key is not None and not isinstance(reason_key, str):\n        raise TypeError('Parameter \"reason_key\" must be of type \"str\"')\n\n    if reason_key is not None and not reason_key:\n        raise ValueError('Parameter \"reason_key\" must not be empty')\n\n    await self._http.post(\n        self._http.paths.users(user_id).bans,\n        json=BanEntryRequest(provider, reason, moderator, reason_key).to_json(),\n    )\n</code></pre>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_bans","title":"<code>get_bans(user_id)</code>  <code>async</code>","text":"<p>Get bans.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_bans--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to look up.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_bans--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_bans--returns","title":"Returns","text":"<p>GetBansResponse     A model response from <code>ravyapi.api.endpoints.users.Users.get_bans</code>.     Located as <code>ravyapi.api.models.users.GetBansResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>@with_permission_check(\"users.bans\")\nasync def get_bans(self: HTTPAwareEndpoint, user_id: int) -&gt; GetBansResponse:\n    \"\"\"Get bans.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetBansResponse\n        A model response from `ravyapi.api.endpoints.users.Users.get_bans`.\n        Located as `ravyapi.api.models.users.GetBansResponse`.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    return GetBansResponse(\n        await self._http.get(self._http.paths.users(user_id).bans)\n    )\n</code></pre>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_pronouns","title":"<code>get_pronouns(user_id)</code>  <code>async</code>","text":"<p>Get pronouns.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_pronouns--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to look up.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_pronouns--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_pronouns--returns","title":"Returns","text":"<p>GetPronounsResponse     A model response from <code>ravyapi.api.endpoints.users.Users.get_pronouns</code>.     Located as <code>ravyapi.api.models.users.GetPronounsResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>@with_permission_check(\"users.pronouns\")\nasync def get_pronouns(\n    self: HTTPAwareEndpoint, user_id: int\n) -&gt; GetPronounsResponse:\n    \"\"\"Get pronouns.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetPronounsResponse\n        A model response from `ravyapi.api.endpoints.users.Users.get_pronouns`.\n        Located as `ravyapi.api.models.users.GetPronounsResponse`.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    return GetPronounsResponse(\n        await self._http.get(self._http.paths.users(user_id).pronouns)\n    )\n</code></pre>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_reputation","title":"<code>get_reputation(user_id)</code>  <code>async</code>","text":"<p>Get reputation.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_reputation--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to look up.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_reputation--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_reputation--returns","title":"Returns","text":"<p>GetReputationResponse     A model response from <code>ravyapi.api.endpoints.users.Users.get_reputation</code>.     Located as <code>ravyapi.api.models.users.GetReputationResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>@with_permission_check(\"users.rep\")\nasync def get_reputation(\n    self: HTTPAwareEndpoint, user_id: int\n) -&gt; GetReputationResponse:\n    \"\"\"Get reputation.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetReputationResponse\n        A model response from `ravyapi.api.endpoints.users.Users.get_reputation`.\n        Located as `ravyapi.api.models.users.GetReputationResponse`.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    return GetReputationResponse(\n        await self._http.get(self._http.paths.users(user_id).reputation)\n    )\n</code></pre>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_user","title":"<code>get_user(user_id)</code>  <code>async</code>","text":"<p>Get extensive user information.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_user--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to look up.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_user--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_user--returns","title":"Returns","text":"<p>GetUserResponse     A model response from <code>ravyapi.api.endpoints.users.Users.get_user</code>.     Located as <code>ravyapi.api.models.users.GetUserResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>@with_permission_check(\"users\")\nasync def get_user(self: HTTPAwareEndpoint, user_id: int) -&gt; GetUserResponse:\n    \"\"\"Get extensive user information.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetUserResponse\n        A model response from `ravyapi.api.endpoints.users.Users.get_user`.\n        Located as `ravyapi.api.models.users.GetUserResponse`.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    return GetUserResponse(\n        await self._http.get(self._http.paths.users(user_id).route)\n    )\n</code></pre>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_whitelists","title":"<code>get_whitelists(user_id)</code>  <code>async</code>","text":"<p>Get whitelists.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_whitelists--parameters","title":"Parameters","text":"<p>user_id : int     User ID of the user to look up.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_whitelists--raises","title":"Raises","text":"<p>TypeError     If any parameters are of invalid types.</p>"},{"location":"reference/api/endpoints/users/#ravyapi.api.endpoints.users.Users.get_whitelists--returns","title":"Returns","text":"<p>GetWhitelistsResponse     A model response from <code>ravyapi.api.endpoints.users.Users.get_whitelists</code>.     Located as <code>ravyapi.api.models.users.GetWhitelistsResponse</code>.</p> Source code in <code>ravyapi/api/endpoints/users.py</code> <pre><code>@with_permission_check(\"users.whitelists\")\nasync def get_whitelists(\n    self: HTTPAwareEndpoint, user_id: int\n) -&gt; GetWhitelistsResponse:\n    \"\"\"Get whitelists.\n\n    Parameters\n    ----------\n    user_id : int\n        User ID of the user to look up.\n\n    Raises\n    ------\n    TypeError\n        If any parameters are of invalid types.\n\n    Returns\n    -------\n    GetWhitelistsResponse\n        A model response from `ravyapi.api.endpoints.users.Users.get_whitelists`.\n        Located as `ravyapi.api.models.users.GetWhitelistsResponse`.\n    \"\"\"\n    if not isinstance(user_id, int):\n        raise TypeError('Parameter \"user_id\" must be of type \"int\"')\n\n    return GetWhitelistsResponse(\n        await self._http.get(self._http.paths.users(user_id).whitelists)\n    )\n</code></pre>"},{"location":"reference/api/models/avatars/","title":"Avatars","text":"<p>API models for the <code>avatars</code> endpoint.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse","title":"<code>CheckAvatarResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.avatars.Avatars.check_avatar</code>.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse--attributes","title":"Attributes","text":"<p>data: dict[str, Any]     The raw data returned from the Ravy API. matched: bool     Whether the avatar was matched. key: str     The avatar key that matched. similarity: float     Similarity of the avatar to the key, represented as a float between 0 and 1.</p> Source code in <code>ravyapi/api/models/avatars.py</code> <pre><code>class CheckAvatarResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.avatars.Avatars.check_avatar`.\n\n    Attributes\n    ----------\n    data: dict[str, Any]\n        The raw data returned from the Ravy API.\n    matched: bool\n        Whether the avatar was matched.\n    key: str\n        The avatar key that matched.\n    similarity: float\n        Similarity of the avatar to the key, represented as a float between 0 and 1.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_matched\", \"_key\", \"_similarity\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._matched: bool = data[\"matched\"]\n        self._key: str | None = data.get(\"key\")\n        self._similarity: float | None = data.get(\"similarity\")\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(matched={self.matched!r}, key={self.key!r}, similarity={self.similarity!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def matched(self) -&gt; bool:\n        \"\"\"Whether the avatar was matched.\"\"\"\n        return self._matched\n\n    @property\n    def key(self) -&gt; str | None:\n        \"\"\"The avatar key that matched.\"\"\"\n        return self._key\n\n    @property\n    def similarity(self) -&gt; float | None:\n        \"\"\"Similarity of the avatar to the key, represented as a float between 0 and 1.\"\"\"\n        return self._similarity\n</code></pre>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.key","title":"<code>key</code>  <code>property</code>","text":"<p>The avatar key that matched.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.matched","title":"<code>matched</code>  <code>property</code>","text":"<p>Whether the avatar was matched.</p>"},{"location":"reference/api/models/avatars/#ravyapi.api.models.avatars.CheckAvatarResponse.similarity","title":"<code>similarity</code>  <code>property</code>","text":"<p>Similarity of the avatar to the key, represented as a float between 0 and 1.</p>"},{"location":"reference/api/models/guilds/","title":"Guilds","text":"<p>API models for the <code>guilds</code> endpoint.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse","title":"<code>GetGuildResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.guilds.Guilds.get_guild</code>.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse--attributes","title":"Attributes","text":"<p>data: dict[str, Any]     The raw data returned from the Ravy API. trust: Trust     The guild's <code>ravyapi.api.models.generic.trust.Trust</code> trust model. bans: list[BanEntryResponse]     A list of the guild's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p> Source code in <code>ravyapi/api/models/guilds.py</code> <pre><code>class GetGuildResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.guilds.Guilds.get_guild`.\n\n    Attributes\n    ----------\n    data: dict[str, Any]\n        The raw data returned from the Ravy API.\n    trust: Trust\n        The guild's `ravyapi.api.models.generic.trust.Trust` trust model.\n    bans: list[BanEntryResponse]\n        A list of the guild's `ravyapi.api.models.generic.ban_entry.BanEntryResponse` ban models.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_trust\", \"_bans\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._trust: Trust = data[\"trust\"]\n        self._bans: list[BanEntryResponse] = [\n            BanEntryResponse(ban) for ban in data[\"bans\"]\n        ]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(trust={self.trust!r}, bans={self.bans!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def trust(self) -&gt; Trust:\n        \"\"\"The guild's `ravyapi.api.models.generic.trust.Trust` trust model.\"\"\"\n        return self._trust\n\n    @property\n    def bans(self) -&gt; list[BanEntryResponse]:\n        \"\"\"A list of the guilds's `ravyapi.api.models.generic.ban_entry.BanEntryResponse` ban models.\"\"\"\n        return self._bans\n</code></pre>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse.bans","title":"<code>bans</code>  <code>property</code>","text":"<p>A list of the guilds's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/guilds/#ravyapi.api.models.guilds.GetGuildResponse.trust","title":"<code>trust</code>  <code>property</code>","text":"<p>The guild's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/ksoft/","title":"Ksoft","text":"<p>API models for the <code>ksoft</code> endpoint.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse","title":"<code>GetKSoftBanResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.ksoft.KSoft.get_ban</code>.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. found: bool     Whether the user was found in the database. user_id : int | None     The user's ID, if found. tag : str | None     The user's tag, if found. reason : str | None     Reason for the ban, if found. proof : str | None     Evidence for the ban, if found. moderator : int | None     User ID of the responsible moderator, if found. severe : bool | None     Whether the ban is severe, if found. timestamp : str | None     A timestamp of the ban, if found.</p> Source code in <code>ravyapi/api/models/ksoft.py</code> <pre><code>class GetKSoftBanResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.ksoft.KSoft.get_ban`.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    found: bool\n        Whether the user was found in the database.\n    user_id : int | None\n        The user's ID, if found.\n    tag : str | None\n        The user's tag, if found.\n    reason : str | None\n        Reason for the ban, if found.\n    proof : str | None\n        Evidence for the ban, if found.\n    moderator : int | None\n        User ID of the responsible moderator, if found.\n    severe : bool | None\n        Whether the ban is severe, if found.\n    timestamp : str | None\n        A timestamp of the ban, if found.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\n        \"_data\",\n        \"_found\",\n        \"_user_id\",\n        \"_tag\",\n        \"_reason\",\n        \"_proof\",\n        \"_moderator\",\n        \"_severe\",\n        \"_timestamp\",\n    )\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._found: bool = data[\"found\"]\n        user_id: str | None = data.get(\"id\")\n        self._user_id: int | None = int(user_id) if user_id else None\n        self._tag: str | None = data.get(\"tag\")\n        self._reason: str | None = data.get(\"reason\")\n        self._proof: str | None = data.get(\"proof\")\n        moderator: str | None = data.get(\"moderator\")\n        self._moderator: int | None = int(moderator) if moderator else None\n        self._severe: bool | None = data.get(\"severe\")\n        self._timestamp: str | None = data.get(\"timestamp\")\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(found={self.found!r}, user_id={self.user_id!r}, tag={self.tag!r}, \"\n            f\"reason={self.reason!r}, proof={self.proof!r}, moderator={self.moderator!r}, \"\n            f\"severe={self.severe!r}, timestamp={self.timestamp!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def found(self) -&gt; bool:\n        \"\"\"Whether the user was found in the database.\"\"\"\n        return self._found\n\n    @property\n    def user_id(self) -&gt; int | None:\n        \"\"\"The user's ID, if found.\"\"\"\n        return self._user_id\n\n    @property\n    def tag(self) -&gt; str | None:\n        \"\"\"The user's tag, if found.\"\"\"\n        return self._tag\n\n    @property\n    def reason(self) -&gt; str | None:\n        \"\"\"Reason for the ban, if found.\"\"\"\n        return self._reason\n\n    @property\n    def proof(self) -&gt; str | None:\n        \"\"\"Evidence for the ban, if found.\"\"\"\n        return self._proof\n\n    @property\n    def moderator(self) -&gt; int | None:\n        \"\"\"User ID of the responsible moderator, if found.\"\"\"\n        return self._moderator\n\n    @property\n    def severe(self) -&gt; bool | None:\n        \"\"\"Whether the ban is severe, if found.\"\"\"\n        return self._severe\n\n    @property\n    def timestamp(self) -&gt; str | None:\n        \"\"\"A timestamp of the ban, if found.\"\"\"\n        return self._timestamp\n</code></pre>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.found","title":"<code>found</code>  <code>property</code>","text":"<p>Whether the user was found in the database.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.moderator","title":"<code>moderator</code>  <code>property</code>","text":"<p>User ID of the responsible moderator, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.proof","title":"<code>proof</code>  <code>property</code>","text":"<p>Evidence for the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.reason","title":"<code>reason</code>  <code>property</code>","text":"<p>Reason for the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.severe","title":"<code>severe</code>  <code>property</code>","text":"<p>Whether the ban is severe, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.tag","title":"<code>tag</code>  <code>property</code>","text":"<p>The user's tag, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.timestamp","title":"<code>timestamp</code>  <code>property</code>","text":"<p>A timestamp of the ban, if found.</p>"},{"location":"reference/api/models/ksoft/#ravyapi.api.models.ksoft.GetKSoftBanResponse.user_id","title":"<code>user_id</code>  <code>property</code>","text":"<p>The user's ID, if found.</p>"},{"location":"reference/api/models/tokens/","title":"Tokens","text":"<p>API models for the <code>tokens</code> endpoint.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse","title":"<code>GetTokenResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.tokens.Tokens.get_token</code>.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse--attributes","title":"Attributes","text":"<p>data: dict[str, Any]     The raw data returned from the Ravy API. user: str     The user ID associated with the token. access: list[str]     A list of valid permission nodes for the token. application: int     The application ID registered to the token. token_type: Literal[\"ravy\", \"ksoft\"]     The type of the token, either \"ravy\" or \"ksoft.\"</p> Source code in <code>ravyapi/api/models/tokens.py</code> <pre><code>class GetTokenResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.tokens.Tokens.get_token`.\n\n    Attributes\n    ----------\n    data: dict[str, Any]\n        The raw data returned from the Ravy API.\n    user: str\n        The user ID associated with the token.\n    access: list[str]\n        A list of valid permission nodes for the token.\n    application: int\n        The application ID registered to the token.\n    token_type: Literal[\"ravy\", \"ksoft\"]\n        The type of the token, either \"ravy\" or \"ksoft.\"\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\n        \"_data\",\n        \"_user\",\n        \"_access\",\n        \"_application\",\n        \"_token_type\",\n    )\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._user: int = int(data[\"user\"])\n        self._access: list[str] = data[\"access\"]\n        self._application: int = int(data[\"application\"])\n        self._token_type: Literal[\"ravy\", \"ksoft\"] = data[\"type\"]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(user={self.user!r}, access={self.access!r}, application={self.application!r}, \"\n            f\"token_type={self.token_type!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def user(self) -&gt; int:\n        \"\"\"The user ID associated with the token.\"\"\"\n        return self._user\n\n    @property\n    def access(self) -&gt; list[str]:\n        \"\"\"A list of valid permission nodes for the token.\"\"\"\n        return self._access\n\n    @property\n    def application(self) -&gt; int:\n        \"\"\"The application ID registered to the token.\"\"\"\n        return self._application\n\n    @property\n    def token_type(self) -&gt; Literal[\"ravy\", \"ksoft\"]:\n        \"\"\"The type of the token, either \"ravy\" or \"ksoft.\\\" \"\"\"\n        return self._token_type\n</code></pre>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.access","title":"<code>access</code>  <code>property</code>","text":"<p>A list of valid permission nodes for the token.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.application","title":"<code>application</code>  <code>property</code>","text":"<p>The application ID registered to the token.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.token_type","title":"<code>token_type</code>  <code>property</code>","text":"<p>The type of the token, either \"ravy\" or \"ksoft.\"</p>"},{"location":"reference/api/models/tokens/#ravyapi.api.models.tokens.GetTokenResponse.user","title":"<code>user</code>  <code>property</code>","text":"<p>The user ID associated with the token.</p>"},{"location":"reference/api/models/urls/","title":"Urls","text":"<p>API models for the <code>urls</code> endpoint.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest","title":"<code>EditWebsiteRequest</code>","text":"<p>A model request to <code>ravyapi.api.endpoints.urls.URLs.edit_website</code>.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest--parameters","title":"Parameters","text":"<p>is_fraudulent: bool     Whether the website is fraudulent. message: str     An informational message about the website.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest--attributes","title":"Attributes","text":"<p>is_fraudulent: bool     Whether the website is fraudulent. message: str     An informational message about the website.</p> Source code in <code>ravyapi/api/models/urls.py</code> <pre><code>class EditWebsiteRequest:\n    \"\"\"A model request to `ravyapi.api.endpoints.urls.URLs.edit_website`.\n\n    Parameters\n    ----------\n    is_fraudulent: bool\n        Whether the website is fraudulent.\n    message: str\n        An informational message about the website.\n\n    Attributes\n    ----------\n    is_fraudulent: bool\n        Whether the website is fraudulent.\n    message: str\n        An informational message about the website.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_is_fraudulent\", \"_message\")\n\n    def __init__(self, is_fraudulent: bool, message: str) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        is_fraudulent: bool\n            Whether the website is fraudulent.\n        message: str\n            An informational message about the website.\n        \"\"\"\n        self._is_fraudulent: bool = is_fraudulent\n        self._message: str = message\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(is_fraudulent={self.is_fraudulent!r}, message={self.message!r})\"\n        )\n\n    @property\n    def is_fraudulent(self) -&gt; bool:\n        \"\"\"Whether the website is fraudulent.\"\"\"\n        return self._is_fraudulent\n\n    @property\n    def message(self) -&gt; str:\n        \"\"\"An informational message about the website.\"\"\"\n        return self._message\n\n    def to_json(self) -&gt; dict[str, Any]:\n        \"\"\"Returns a JSON representation of the model.\n\n        Returns\n        -------\n        dict[str, Any]\n            A JSON representation of the model.\n        \"\"\"\n        return {\n            \"isFraudulent\": self.is_fraudulent,\n            \"message\": self.message,\n        }\n</code></pre>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.is_fraudulent","title":"<code>is_fraudulent</code>  <code>property</code>","text":"<p>Whether the website is fraudulent.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.message","title":"<code>message</code>  <code>property</code>","text":"<p>An informational message about the website.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.__init__","title":"<code>__init__(is_fraudulent, message)</code>","text":""},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.__init__--parameters","title":"Parameters","text":"<p>is_fraudulent: bool     Whether the website is fraudulent. message: str     An informational message about the website.</p> Source code in <code>ravyapi/api/models/urls.py</code> <pre><code>def __init__(self, is_fraudulent: bool, message: str) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    is_fraudulent: bool\n        Whether the website is fraudulent.\n    message: str\n        An informational message about the website.\n    \"\"\"\n    self._is_fraudulent: bool = is_fraudulent\n    self._message: str = message\n</code></pre>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.to_json","title":"<code>to_json()</code>","text":"<p>Returns a JSON representation of the model.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.EditWebsiteRequest.to_json--returns","title":"Returns","text":"<p>dict[str, Any]     A JSON representation of the model.</p> Source code in <code>ravyapi/api/models/urls.py</code> <pre><code>def to_json(self) -&gt; dict[str, Any]:\n    \"\"\"Returns a JSON representation of the model.\n\n    Returns\n    -------\n    dict[str, Any]\n        A JSON representation of the model.\n    \"\"\"\n    return {\n        \"isFraudulent\": self.is_fraudulent,\n        \"message\": self.message,\n    }\n</code></pre>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse","title":"<code>GetWebsiteResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.urls.URLs.get_website</code>.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse--attributes","title":"Attributes","text":"<p>data: dict[str, Any]     The raw data returned from the Ravy API. is_fraudulent: bool     Whether the website is fraudulent. message: str     An informational message about the website.</p> Source code in <code>ravyapi/api/models/urls.py</code> <pre><code>class GetWebsiteResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.urls.URLs.get_website`.\n\n    Attributes\n    ----------\n    data: dict[str, Any]\n        The raw data returned from the Ravy API.\n    is_fraudulent: bool\n        Whether the website is fraudulent.\n    message: str\n        An informational message about the website.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_is_fraudulent\", \"_message\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._is_fraudulent: bool = data[\"isFraudulent\"]\n        self._message: str = data[\"message\"]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(is_fraudulent={self.is_fraudulent!r}, message={self.message!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def is_fraudulent(self) -&gt; bool:\n        \"\"\"Whether the website is fraudulent.\"\"\"\n        return self._is_fraudulent\n\n    @property\n    def message(self) -&gt; str:\n        \"\"\"An informational message about the website.\"\"\"\n        return self._message\n</code></pre>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse.is_fraudulent","title":"<code>is_fraudulent</code>  <code>property</code>","text":"<p>Whether the website is fraudulent.</p>"},{"location":"reference/api/models/urls/#ravyapi.api.models.urls.GetWebsiteResponse.message","title":"<code>message</code>  <code>property</code>","text":"<p>An informational message about the website.</p>"},{"location":"reference/api/models/users/","title":"Users","text":"<p>API models for the <code>users</code> endpoint.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse","title":"<code>GetBansResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_bans</code>.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. trust : Trust     The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model. bans : list[BanEntryResponse]     A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class GetBansResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.users.Users.get_bans`.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    trust : Trust\n        The user's `ravyapi.api.models.generic.trust.Trust` trust model.\n    bans : list[BanEntryResponse]\n        A list of the user's `ravyapi.api.models.generic.ban_entry.BanEntryResponse` ban models.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_trust\", \"_bans\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._trust = Trust(data[\"trust\"])\n        self._bans = [BanEntryResponse(ban) for ban in data[\"bans\"]]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(trust={self.trust!r}, bans={self.bans!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def trust(self) -&gt; Trust:\n        \"\"\"The user's `ravyapi.api.models.generic.trust.Trust` trust model.\"\"\"\n        return self._trust\n\n    @property\n    def bans(self) -&gt; list[BanEntryResponse]:\n        \"\"\"A list of the user's `ravyapi.api.models.generic.ban_entry.BanEntryResponse` ban models.\"\"\"\n        return self._bans\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse.bans","title":"<code>bans</code>  <code>property</code>","text":"<p>A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetBansResponse.trust","title":"<code>trust</code>  <code>property</code>","text":"<p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse","title":"<code>GetPronounsResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_pronouns</code>.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. pronouns : str     The user's pronouns.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class GetPronounsResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.users.Users.get_pronouns`.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    pronouns : str\n        The user's pronouns.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_pronouns\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._pronouns: str = data[\"pronouns\"]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(pronouns={self.pronouns!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def pronouns(self) -&gt; str:\n        \"\"\"The user's pronouns.\"\"\"\n        return self._pronouns\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetPronounsResponse.pronouns","title":"<code>pronouns</code>  <code>property</code>","text":"<p>The user's pronouns.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse","title":"<code>GetReputationResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_reputation</code>.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. rep : list[ReputationEntry]     A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models. trust : Trust     The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class GetReputationResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.users.Users.get_reputation`.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    rep : list[ReputationEntry]\n        A list of the user's `ravyapi.api.models.users.ReputationEntry` reputation models.\n    trust : Trust\n        The user's `ravyapi.api.models.generic.trust.Trust` trust model.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_rep\", \"_trust\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._rep = [ReputationEntry(rep) for rep in data[\"rep\"]]\n        self._trust = Trust(data[\"trust\"])\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(rep={self.rep!r}, trust={self.trust!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def rep(self) -&gt; list[ReputationEntry]:\n        \"\"\"A list of the user's `ravyapi.api.models.users.ReputationEntry` reputation models.\"\"\"\n        return self._rep\n\n    @property\n    def trust(self) -&gt; Trust:\n        \"\"\"The user's `ravyapi.api.models.generic.trust.Trust` trust model.\"\"\"\n        return self._trust\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse.rep","title":"<code>rep</code>  <code>property</code>","text":"<p>A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetReputationResponse.trust","title":"<code>trust</code>  <code>property</code>","text":"<p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse","title":"<code>GetUserResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_user</code>.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. pronouns : str     The user's pronouns. trust : Trust     The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model. whitelists : list[WhitelistEntry]     A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models. bans : list[BanEntryResponse]     A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models. rep : list[ReputationEntry]     A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models. sentinel : SentinelEntry     The user's <code>ravyapi.api.models.users.SentinelEntry</code> sentinel model.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class GetUserResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.users.Users.get_user`.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    pronouns : str\n        The user's pronouns.\n    trust : Trust\n        The user's `ravyapi.api.models.generic.trust.Trust` trust model.\n    whitelists : list[WhitelistEntry]\n        A list of the user's `ravyapi.api.models.users.WhitelistEntry` whitelist models.\n    bans : list[BanEntryResponse]\n        A list of the user's `ravyapi.api.models.generic.ban_entry.BanEntryResponse` ban models.\n    rep : list[ReputationEntry]\n        A list of the user's `ravyapi.api.models.users.ReputationEntry` reputation models.\n    sentinel : SentinelEntry\n        The user's `ravyapi.api.models.users.SentinelEntry` sentinel model.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\n        \"_data\",\n        \"_pronouns\",\n        \"_trust\",\n        \"_whitelists\",\n        \"_bans\",\n        \"_rep\",\n        \"_sentinel\",\n    )\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._pronouns: str = data[\"pronouns\"]\n        self._trust: Trust = Trust(data[\"trust\"])\n        self._whitelists: list[WhitelistEntry] = [\n            WhitelistEntry(whitelist) for whitelist in data[\"whitelists\"]\n        ]\n        self._bans: list[BanEntryResponse] = [\n            BanEntryResponse(ban) for ban in data[\"bans\"]\n        ]\n        self._rep: list[ReputationEntry] = [ReputationEntry(rep) for rep in data[\"rep\"]]\n        self._sentinel: SentinelEntry = SentinelEntry(data[\"sentinel\"])\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(pronouns={self.pronouns!r}, trust={self.trust!r}, \"\n            f\"whitelists={self.whitelists!r}, bans={self.bans!r}, \"\n            f\"rep={self.rep!r}, sentinel={self.sentinel!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def pronouns(self) -&gt; str:\n        \"\"\"The user's pronouns.\"\"\"\n        return self._pronouns\n\n    @property\n    def trust(self) -&gt; Trust:\n        \"\"\"The user's `ravyapi.api.models.generic.trust.Trust` trust model.\"\"\"\n        return self._trust\n\n    @property\n    def whitelists(self) -&gt; list[WhitelistEntry]:\n        \"\"\"A list of the user's `ravyapi.api.models.users.WhitelistEntry` whitelist models.\"\"\"\n        return self._whitelists\n\n    @property\n    def bans(self) -&gt; list[BanEntryResponse]:\n        \"\"\"A list of the user's `ravyapi.api.models.generic.ban_entry.BanEntryResponse` ban models.\"\"\"\n        return self._bans\n\n    @property\n    def rep(self) -&gt; list[ReputationEntry]:\n        \"\"\"A list of the user's `ravyapi.api.models.users.ReputationEntry` reputation models.\"\"\"\n        return self._rep\n\n    @property\n    def sentinel(self) -&gt; SentinelEntry:\n        \"\"\"The user's `ravyapi.api.models.users.SentinelEntry` sentinel model.\"\"\"\n        return self._sentinel\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.bans","title":"<code>bans</code>  <code>property</code>","text":"<p>A list of the user's <code>ravyapi.api.models.generic.ban_entry.BanEntryResponse</code> ban models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.pronouns","title":"<code>pronouns</code>  <code>property</code>","text":"<p>The user's pronouns.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.rep","title":"<code>rep</code>  <code>property</code>","text":"<p>A list of the user's <code>ravyapi.api.models.users.ReputationEntry</code> reputation models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.sentinel","title":"<code>sentinel</code>  <code>property</code>","text":"<p>The user's <code>ravyapi.api.models.users.SentinelEntry</code> sentinel model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.trust","title":"<code>trust</code>  <code>property</code>","text":"<p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetUserResponse.whitelists","title":"<code>whitelists</code>  <code>property</code>","text":"<p>A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse","title":"<code>GetWhitelistsResponse</code>","text":"<p>A model response from <code>ravyapi.api.endpoints.users.Users.get_whitelists</code>.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. whitelists : list[WhitelistEntry]     A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models. trust : Trust     The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class GetWhitelistsResponse:\n    \"\"\"A model response from `ravyapi.api.endpoints.users.Users.get_whitelists`.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    whitelists : list[WhitelistEntry]\n        A list of the user's `ravyapi.api.models.users.WhitelistEntry` whitelist models.\n    trust : Trust\n        The user's `ravyapi.api.models.generic.trust.Trust` trust model.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_whitelists\", \"_trust\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._whitelists = [\n            WhitelistEntry(whitelist) for whitelist in data[\"whitelists\"]\n        ]\n        self._trust = Trust(data[\"trust\"])\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(whitelists={self.whitelists!r}, trust={self.trust!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def whitelists(self) -&gt; list[WhitelistEntry]:\n        \"\"\"A list of the user's `ravyapi.api.models.users.WhitelistEntry` whitelist models.\"\"\"\n        return self._whitelists\n\n    @property\n    def trust(self) -&gt; Trust:\n        \"\"\"The user's `ravyapi.api.models.generic.trust.Trust` trust model.\"\"\"\n        return self._trust\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse.trust","title":"<code>trust</code>  <code>property</code>","text":"<p>The user's <code>ravyapi.api.models.generic.trust.Trust</code> trust model.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.GetWhitelistsResponse.whitelists","title":"<code>whitelists</code>  <code>property</code>","text":"<p>A list of the user's <code>ravyapi.api.models.users.WhitelistEntry</code> whitelist models.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry","title":"<code>ReputationEntry</code>","text":"<p>A model for a user's reputation entry.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. provider : str     Source for the reputation data. score : float     Normalized value (0-1) for reputation of the user, 0.5 is default. upvotes : int | None     Amount of upvotes this user has received, optional. downvotes : int | None     Amount of downvotes this user has received, optional.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class ReputationEntry:\n    \"\"\"A model for a user's reputation entry.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    provider : str\n        Source for the reputation data.\n    score : float\n        Normalized value (0-1) for reputation of the user, 0.5 is default.\n    upvotes : int | None\n        Amount of upvotes this user has received, optional.\n    downvotes : int | None\n        Amount of downvotes this user has received, optional.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\n        \"_data\",\n        \"_provider\",\n        \"_score\",\n        \"_upvotes\",\n        \"_downvotes\",\n    )\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._provider: str = data[\"provider\"]\n        self._score: float = data[\"score\"]\n        self._upvotes: int | None = data.get(\"upvotes\")\n        self._downvotes: int | None = data.get(\"downvotes\")\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(provider={self.provider!r}, score={self.score!r}, \"\n            f\"upvotes={self.upvotes!r}, downvotes={self.downvotes!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def provider(self) -&gt; str:\n        \"\"\"Source for the reputation data.\"\"\"\n        return self._provider\n\n    @property\n    def score(self) -&gt; float:\n        \"\"\"Normalized value (0-1) for reputation of the user, 0.5 is default.\"\"\"\n        return self._score\n\n    @property\n    def upvotes(self) -&gt; int | None:\n        \"\"\"Amount of upvotes this user has received, optional.\"\"\"\n        return self._upvotes\n\n    @property\n    def downvotes(self) -&gt; int | None:\n        \"\"\"Amount of downvotes this user has received, optional.\"\"\"\n        return self._downvotes\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.downvotes","title":"<code>downvotes</code>  <code>property</code>","text":"<p>Amount of downvotes this user has received, optional.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.provider","title":"<code>provider</code>  <code>property</code>","text":"<p>Source for the reputation data.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.score","title":"<code>score</code>  <code>property</code>","text":"<p>Normalized value (0-1) for reputation of the user, 0.5 is default.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.ReputationEntry.upvotes","title":"<code>upvotes</code>  <code>property</code>","text":"<p>Amount of upvotes this user has received, optional.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry","title":"<code>SentinelEntry</code>","text":"<p>A model for a user's sentinel entry.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. verified : bool     Whether this user has linked their account to sentinel. internal_id : str     Internal ID for debug purposes.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class SentinelEntry:\n    \"\"\"A model for a user's sentinel entry.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    verified : bool\n        Whether this user has linked their account to sentinel.\n    internal_id : str\n        Internal ID for debug purposes.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_verified\", \"_internal_id\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._verified: bool = data[\"verified\"]\n        self._internal_id: str = str(data[\"id\"])\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(verified={self.verified!r}, internal_id={self.internal_id!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def verified(self) -&gt; bool:\n        \"\"\"Whether this user has linked their account to sentinel.\"\"\"\n        return self._verified\n\n    @property\n    def internal_id(self) -&gt; str:\n        \"\"\"Internal ID for debug purposes.\"\"\"\n        return self._internal_id\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry.internal_id","title":"<code>internal_id</code>  <code>property</code>","text":"<p>Internal ID for debug purposes.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.SentinelEntry.verified","title":"<code>verified</code>  <code>property</code>","text":"<p>Whether this user has linked their account to sentinel.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry","title":"<code>WhitelistEntry</code>","text":"<p>A model for a user's whitelist entry.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry--attributes","title":"Attributes","text":"<p>data : dict[str, Any]     The raw data returned from the Ravy API. provider : str     Source for where the user is whitelisted. reason : str     Why the user is whitelisted, usually STAFF.</p> Source code in <code>ravyapi/api/models/users.py</code> <pre><code>class WhitelistEntry:\n    \"\"\"A model for a user's whitelist entry.\n\n    Attributes\n    ----------\n    data : dict[str, Any]\n        The raw data returned from the Ravy API.\n    provider : str\n        Source for where the user is whitelisted.\n    reason : str\n        Why the user is whitelisted, usually STAFF.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_provider\", \"_reason\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._provider: str = data[\"provider\"]\n        self._reason: str = data[\"reason\"]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(provider={self.provider!r}, reason={self.reason!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def provider(self) -&gt; str:\n        \"\"\"Source for where the user is whitelisted.\"\"\"\n        return self._provider\n\n    @property\n    def reason(self) -&gt; str:\n        \"\"\"Why the user is whitelisted, usually STAFF.\"\"\"\n        return self._reason\n</code></pre>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry.provider","title":"<code>provider</code>  <code>property</code>","text":"<p>Source for where the user is whitelisted.</p>"},{"location":"reference/api/models/users/#ravyapi.api.models.users.WhitelistEntry.reason","title":"<code>reason</code>  <code>property</code>","text":"<p>Why the user is whitelisted, usually STAFF.</p>"},{"location":"reference/api/models/generic/ban_entry/","title":"Ban entry","text":"<p>Generic models for ban entries.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest","title":"<code>BanEntryRequest</code>","text":"<p>A generic model for ban entry requests.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest--parameters","title":"Parameters","text":"<p>provider: str     Source for where the user or guild is banned. reason: str     Why the user or guild is banned. moderator: int     User ID of the responsible moderator, usually Discord. reason_key: str | None     Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest--attributes","title":"Attributes","text":"<p>provider: str     Source for where the user or guild is banned. reason: str     Why the user or guild is banned. moderator: int     User ID of the responsible moderator, usually Discord. reason_key: str | None     Machine-readable version of the reason - only present for providers ravy and dservices.</p> Source code in <code>ravyapi/api/models/generic/ban_entry.py</code> <pre><code>class BanEntryRequest:\n    \"\"\"A generic model for ban entry requests.\n\n    Parameters\n    ----------\n    provider: str\n        Source for where the user or guild is banned.\n    reason: str\n        Why the user or guild is banned.\n    moderator: int\n        User ID of the responsible moderator, usually Discord.\n    reason_key: str | None\n        Machine-readable version of the reason - only present for providers ravy and dservices.\n\n    Attributes\n    ----------\n    provider: str\n        Source for where the user or guild is banned.\n    reason: str\n        Why the user or guild is banned.\n    moderator: int\n        User ID of the responsible moderator, usually Discord.\n    reason_key: str | None\n        Machine-readable version of the reason - only present for providers ravy and dservices.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_provider\", \"_reason\", \"_moderator\", \"_reason_key\")\n\n    def __init__(\n        self, provider: str, reason: str, moderator: int, reason_key: str | None = None\n    ) -&gt; None:\n        \"\"\"\n        Parameters\n        ----------\n        provider: str\n            Source for where the user or guild is banned.\n        reason: str\n            Why the user or guild is banned.\n        moderator: int\n            User ID of the responsible moderator, usually Discord.\n        reason_key: str | None\n            Machine-readable version of the reason - only present for providers ravy and dservices.\n        \"\"\"\n        self._provider: str = provider\n        self._reason: str = reason\n        self._moderator: int = moderator\n        self._reason_key: str | None = reason_key\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(provider={self.provider!r}, reason={self.reason!r}, \"\n            f\"moderator={self.moderator!r}, reason_key={self.reason_key!r})\"\n        )\n\n    @property\n    def provider(self) -&gt; str:\n        \"\"\"Source for where the user or guild is banned.\"\"\"\n        return self._provider\n\n    @property\n    def reason(self) -&gt; str:\n        \"\"\"Why the user or guild is banned.\"\"\"\n        return self._reason\n\n    @property\n    def moderator(self) -&gt; int:\n        \"\"\"User ID of the responsible moderator, usually Discord.\"\"\"\n        return self._moderator\n\n    @property\n    def reason_key(self) -&gt; str | None:\n        \"\"\"Machine-readable version of the reason - only present for providers ravy and dservices.\"\"\"\n        return self._reason_key\n\n    def to_json(self) -&gt; dict[str, Any]:\n        \"\"\"Returns a JSON representation of the model.\n\n        Returns\n        -------\n        dict[str, Any]\n            A JSON representation of the model.\n        \"\"\"\n        data = {\n            \"provider\": self.provider,\n            \"reason\": self.reason,\n            \"moderator\": str(self.moderator),\n        }\n\n        if self.reason_key is not None:\n            data[\"reason_key\"] = self.reason_key\n\n        return data\n</code></pre>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.moderator","title":"<code>moderator</code>  <code>property</code>","text":"<p>User ID of the responsible moderator, usually Discord.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.provider","title":"<code>provider</code>  <code>property</code>","text":"<p>Source for where the user or guild is banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.reason","title":"<code>reason</code>  <code>property</code>","text":"<p>Why the user or guild is banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.reason_key","title":"<code>reason_key</code>  <code>property</code>","text":"<p>Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.__init__","title":"<code>__init__(provider, reason, moderator, reason_key=None)</code>","text":""},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.__init__--parameters","title":"Parameters","text":"<p>provider: str     Source for where the user or guild is banned. reason: str     Why the user or guild is banned. moderator: int     User ID of the responsible moderator, usually Discord. reason_key: str | None     Machine-readable version of the reason - only present for providers ravy and dservices.</p> Source code in <code>ravyapi/api/models/generic/ban_entry.py</code> <pre><code>def __init__(\n    self, provider: str, reason: str, moderator: int, reason_key: str | None = None\n) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    provider: str\n        Source for where the user or guild is banned.\n    reason: str\n        Why the user or guild is banned.\n    moderator: int\n        User ID of the responsible moderator, usually Discord.\n    reason_key: str | None\n        Machine-readable version of the reason - only present for providers ravy and dservices.\n    \"\"\"\n    self._provider: str = provider\n    self._reason: str = reason\n    self._moderator: int = moderator\n    self._reason_key: str | None = reason_key\n</code></pre>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.to_json","title":"<code>to_json()</code>","text":"<p>Returns a JSON representation of the model.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryRequest.to_json--returns","title":"Returns","text":"<p>dict[str, Any]     A JSON representation of the model.</p> Source code in <code>ravyapi/api/models/generic/ban_entry.py</code> <pre><code>def to_json(self) -&gt; dict[str, Any]:\n    \"\"\"Returns a JSON representation of the model.\n\n    Returns\n    -------\n    dict[str, Any]\n        A JSON representation of the model.\n    \"\"\"\n    data = {\n        \"provider\": self.provider,\n        \"reason\": self.reason,\n        \"moderator\": str(self.moderator),\n    }\n\n    if self.reason_key is not None:\n        data[\"reason_key\"] = self.reason_key\n\n    return data\n</code></pre>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse","title":"<code>BanEntryResponse</code>","text":"<p>A generic model for ban entry responses.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse--attributes","title":"Attributes","text":"<p>data: dict[str, Any]     The raw data returned from the Ravy API. provider: str     Source for where the user or guild was banned. reason: str     Why the user or guild was banned. reason_key: str | None     Machine-readable version of the reason - only present for providers ravy and dservices. moderator: int     User ID of the responsible moderator, usually Discord.</p> Source code in <code>ravyapi/api/models/generic/ban_entry.py</code> <pre><code>class BanEntryResponse:\n    \"\"\"A generic model for ban entry responses.\n\n    Attributes\n    ----------\n    data: dict[str, Any]\n        The raw data returned from the Ravy API.\n    provider: str\n        Source for where the user or guild was banned.\n    reason: str\n        Why the user or guild was banned.\n    reason_key: str | None\n        Machine-readable version of the reason - only present for providers ravy and dservices.\n    moderator: int\n        User ID of the responsible moderator, usually Discord.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\n        \"_data\",\n        \"_provider\",\n        \"_reason\",\n        \"_reason_key\",\n        \"_moderator\",\n    )\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._provider: str = data[\"provider\"]\n        self._reason: str = data[\"reason\"]\n        self._reason_key: str | None = data.get(\"reason_key\")\n        self._moderator: int = int(data[\"moderator\"])\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(provider={self.provider!r}, reason={self.reason!r}, \"\n            f\"reason_key={self.reason_key!r}, moderator={self.moderator!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def provider(self) -&gt; str:\n        \"\"\"Source for where the user or guild was banned.\"\"\"\n        return self._provider\n\n    @property\n    def reason(self) -&gt; str:\n        \"\"\"Why the user or guild was banned.\"\"\"\n        return self._reason\n\n    @property\n    def reason_key(self) -&gt; str | None:\n        \"\"\"Machine-readable version of the reason - only present for providers ravy and dservices.\"\"\"\n        return self._reason_key\n\n    @property\n    def moderator(self) -&gt; int:\n        \"\"\"User ID of the responsible moderator, usually Discord.\"\"\"\n        return self._moderator\n</code></pre>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.moderator","title":"<code>moderator</code>  <code>property</code>","text":"<p>User ID of the responsible moderator, usually Discord.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.provider","title":"<code>provider</code>  <code>property</code>","text":"<p>Source for where the user or guild was banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.reason","title":"<code>reason</code>  <code>property</code>","text":"<p>Why the user or guild was banned.</p>"},{"location":"reference/api/models/generic/ban_entry/#ravyapi.api.models.generic.ban_entry.BanEntryResponse.reason_key","title":"<code>reason_key</code>  <code>property</code>","text":"<p>Machine-readable version of the reason - only present for providers ravy and dservices.</p>"},{"location":"reference/api/models/generic/trust/","title":"Trust","text":"<p>A generic model for trust.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust","title":"<code>Trust</code>","text":"<p>A generic model for trust.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust--attributes","title":"Attributes","text":"<p>data: dict[str, Any]     The raw data returned from the Ravy API. level: int     From 0-6, higher is better, default is 3. label: str     What the number means.</p> Source code in <code>ravyapi/api/models/generic/trust.py</code> <pre><code>class Trust:\n    \"\"\"A generic model for trust.\n\n    Attributes\n    ----------\n    data: dict[str, Any]\n        The raw data returned from the Ravy API.\n    level: int\n        From 0-6, higher is better, default is 3.\n    label: str\n        What the number means.\n    \"\"\"\n\n    __slots__: tuple[str, ...] = (\"_data\", \"_level\", \"_label\")\n\n    def __init__(self, data: dict[str, Any]) -&gt; None:\n        self._data: dict[str, Any] = data\n        self._level: int = data[\"level\"]\n        self._label: str = data[\"label\"]\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__module__}.{self.__class__.__qualname__}\"\n            f\"(level={self.level!r}, label={self.label!r})\"\n        )\n\n    @property\n    def data(self) -&gt; dict[str, Any]:\n        \"\"\"The raw data returned from the Ravy API.\"\"\"\n        return self._data\n\n    @property\n    def level(self) -&gt; int:\n        \"\"\"From 0-6, higher is better, default is 3.\"\"\"\n        return self._level\n\n    @property\n    def label(self) -&gt; str:\n        \"\"\"What the number means.\"\"\"\n        return self._label\n</code></pre>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust.data","title":"<code>data</code>  <code>property</code>","text":"<p>The raw data returned from the Ravy API.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust.label","title":"<code>label</code>  <code>property</code>","text":"<p>What the number means.</p>"},{"location":"reference/api/models/generic/trust/#ravyapi.api.models.generic.trust.Trust.level","title":"<code>level</code>  <code>property</code>","text":"<p>From 0-6, higher is better, default is 3.</p>"}]}